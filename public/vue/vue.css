
#app {
    font-family: 'Avenir', Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: center;
    color: #2c3e50;
}

.md-app[data-v-3f580e42] {
    min-height: 100vh;
    max-height: 100vh;
    border: 1px solid rgba(0, 0, 0, 0.12);
}
.md-drawer[data-v-3f580e42] {
    width: 230px;
    max-width: calc(100vw - 125px);
}
.md-list[data-v-3f580e42] {
    width: 320px;
    max-width: 100%;
    display: inline-block;
    vertical-align: top;
    border: 1px solid rgba(#000, .12);
}


.md-progress-bar[data-v-69d3ae5c] {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
}
.login[data-v-69d3ae5c] {
  margin-left: auto;
  margin-right: auto;
  width: 70%;
  height: 100%;
  min-width: 300px;
  max-width: 500px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}











































































































































.gallery-card[data-v-07713880] {
    margin-top: 10px;
    margin-bottom: 10px;
}
img[data-v-07713880] {
    width:100%;
    height:100%;
    object-fit: cover;
    overflow: hidden;
}






























/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/